{
  "name": "seret",
  "version": "0.6.0",
  "description": "Capturing images from USB(UVC) webcam on linux machines",
  "keywords": [
    "linux",
    "camera",
    "native",
    "v4l2",
    "video4linux2"
  ],
  "homepage": "https://github.com/lamassu/node-seret",
  "bugs": {
    "url": "https://github.com/lamassu/node-seret/issues"
  },
  "licenses": [
    {
      "type": "UNLICENSE",
      "url": "http://unlicense.org/"
    }
  ],
  "author": {
    "name": "Josh Harvey",
    "email": "joshmh@gmail.com",
    "url": "http://lamassu.is"
  },
  "main": "./index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/lamassu/node-seret.git"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "node test.js",
    "install": "node-gyp rebuild"
  },
  "os": [
    "linux"
  ],
  "dependencies": {
    "async": "~0.9.0"
  },
  "gypfile": true,
  "readme": "# node-v4l2camera\n\nCapturing images from USB(UVC) webcam on linux machines.\n\n## Requirements\n\n- node >= 0.10.x\n- video4linux2 headers\n- c and c++ compiler with `-std=c11` and `-std=c++11`\n    - gcc >= 4.7\n\n## Install\n\nOn linux machines:\n\n```bash\nnpm install v4l2camera\n```\n\n- package details: https://npmjs.org/package/v4l2camera\n\n## Usage\n\n```js\nvar v4l2camera = require(\"v4l2camera\");\n\nvar cam = new v4l2camera.Camera(\"/dev/video0\");\ncam.start();\ncam.capture(function (success) {\n  var rgb = cam.toRGB();\n  require(\"fs\").writeFileSync(\"result.raw\", Buffer(rgb));\n  cam.stop();\n});\n```\n\nFor more detail see: examples/*.js (required \"pngjs\" or native \"png\" modules)\n\n## API\n\nInitializing API\n\n- `var cam = new v4l2camera.Camera(device)`\n- `cam.formats`: Array of available frame formats\n- `var format = cam.formats[n]`\n    - `format.formatName`: Name of pixel format. e.g. `\"YUYV\"`\n    - `format.format`: ID number of pixel format\n    - `format.width`: Frame width\n    - `format.height`: Frame height\n    - `format.interval.numerator` and `format.interval.denominator`\n      : Capturing interval per `numerator/denominator` seconds \n      (e.g. 30fps is 1/30)\n- `cam.configSet(format)`\n  : Set capture `width`, `height`, `interval` per `numerator/denominator` sec\n  if the members exist in the `format` object\n- `cam.configGet()` : Get a `format` object of current config\n\nCapturing API\n\n- `cam.start()`\n- `cam.stop(afterStoped())`\n    - call re-`config(format)` or re-`start()` in `afterStoped()` callback\n- `cam.capture(afterCaptured)`: Do cache a current captured frame\n    - call `cam.toRGB()` in `afterCaptured(true)` callback\n- `cam.toYUYV()`: Get the cached frame as 8bit int Array of pixels YUYVYUYV...\n- `cam.toRGB()`: Get the cached frame as 8bit int Array of pixels RGBRGB...\n- `cam.device`\n- `cam.width`\n- `cam.height`\n\nControl API\n\n- `cam.controls`: Array of the control information\n- `cam.controlGet(id)`: Get int value of the control of the `id`\n  (id is one of cam.controls[n].id)\n- `cam.controlSet(id, value)`: Set int value of the control of the `id`\n- `var control = cam.controls[n]`: Control spec\n    - `control.id`: Control `id` for controlGet and controlSet\n    - `control.name`: Control name string\n    - `control.type`: `\"int\"`, `\"bool\"`, `\"button\"`, `\"menu\"` or other types\n    - `control.max`, `control.min`, `control.step`: value should be\n      `min <= v` and `v <= max` and `(v - min) % step === 0`\n    - `control.default`: default value of the control\n    - `control.flags`: Several bool flags of the controls\n    - `control.menu`: Array of items. \n      A control value is the index of the menu item when type is `\"menu\"`.\n\n## Build for Development\n\nOn linux machines:\n\n```bash\ncd myproject\nmkdir -p node_modules\ncd node_modules\ngit clone https://github.com/bellbind/node-v4l2camera.git v4l2camera\ncd v4l2camera\nnpm install\ncd ../..\n```\n\n\"build/Release/v4l2camera.node\" is exist after the build.\n\n## Tested Environments\n\n- Ubuntu raring armhf on BeagleBone Black with USB Buffalo BSW13K10H\n- Ubuntu raring amd64 on Acer Aspire One with its screen facecam\n\n## Notes\n\nThis is a nice resource for understanding how v4l2 works: http://www.jayrambhia.com/blog/capture-v4l2/\n\n## Licenses\n\n[MIT](http://opensource.org/licenses/MIT) and \n[LGPL-3.0](http://opensource.org/licenses/LGPL-3.0) dual\n",
  "readmeFilename": "readme.md",
  "_id": "seret@0.6.0",
  "_from": "seret@"
}
